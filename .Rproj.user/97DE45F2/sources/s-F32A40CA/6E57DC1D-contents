JDayForPlotting<- seq(min(thisSite$JulianDay), max(thisSite$JulianDay), length=5000)
IntBasis<- mSpline(JDayForPlotting,  # spline spanning range of X values
                 knots=quantile(thisSite$JulianDay, probs=c(0.143, 0.286, 0.429, 0.571, 0.714, 0.857)),
                 Boundary.knots=c(1,365),
                 periodic=T) # basis functions for smooth function
RealFitJ<- JBasis%*%(coef(tempMod)[JDInd]) # multiply basis functions by model coefficients to get values of spline at each X
RealFitCenterJ<- RealFitJ+coef(tempMod)[1]-mean(JxJD) # adjust offset
RealFitCenterJ<- inv.logit(RealFitCenterJ)
JDayBootstrapFits<- (JBasis%*%t(JDayBootstrapCoefs))+coef(tempMod)[1] # get spread of spline values at each X based on distributions of each coefficient
quant.func<- function(x){quantile(x, probs=c(0.025,0.975))}
cisJ<-apply(JDayBootstrapFits, 1, quant.func)-mean(JxJD) # confidence interval of smooth function estimate
Jcil<-inv.logit(cisJ[1,]) # lowerCI bound
Jciu<-inv.logit(cisJ[2,]) # upper CI bound

JplotDF = data.frame(JDayForPlotting,RealFitCenterJ)
colnames(JplotDF) = c("Jday","Fit")

JD = ggplot(JplotDF, aes(Jday, Fit),
) + geom_smooth(fill = "grey",
                colour = "black",
                aes(ymin=Jcil, ymax=1.05*Jciu),
                stat ="identity"
) + labs(x = "Julian Day",
         y = "Probability",
) + scale_x_continuous(breaks=c(1,32,60,91,121,152,182,213,244,274,305,335),
                       label=c("J","F","M","A","M","J","J","A","S","O","N","D")
) + theme(axis.line = element_line(size=0.2),
          panel.background = element_blank()
)