library(ncdf4)
library(ggplot2)
library(EFDR)
library(landsat)
library(sp)


file = 'J:/Chpt_3/GEBCO/gebco_2021_n44.0_s24.0_w-82.0_e-63.0.nc'
ncid = nc_open(file)

elev = data.frame(t(ncvar_get(ncid,'elevation')))
lat = ncvar_get(ncid,'lat')
lon = ncvar_get(ncid,'lon')

elDF = data.frame(z=stack(elev)[,1],
                    y=rep(lat,length.out=length(lon)*length(lat)),
                  x=rep(lon,each=length(lat)))
# ggplot(elDF,aes(x=x,y=y))+geom_tile(aes(fill=z))

newx = seq(278,297,by=0.08)
newy = seq(24,44,by=0.08)
newGrid = regrid(elDF,n1=length(newx),n2=length(newy),method="idw")

# Convert to a SpatialPointsDataFrame
coordinates(newGrid) = ~y+x
proj4string(newGrid) = CRS('+proj=longlat +datum=WGS84')

# Source: https://stackoverflow.com/questions/64380342/turn-spatialpointsdataframe-to-spatialgriddataframe
# Transform to a SpatialPixelsDataFrame
SGDF = as(elDF,'SpatialPixelsDataFrame')
# Transform to a SpatialGridDataFrame
SGDF = as(SGDF,'SpatialGridDataFrame')

# Calculate slope and aspect
SA = slopeasp(SGDF)

slope = matrix(unlist(SA$slope$data),ncol=length(lon),byrow=TRUE)
aspect = matrix(unlist(SA$aspect$data),ncol=length(lon),byrow=TRUE)

slopeDF = data.frame(data=stack(data.frame(slope))[,1],
                     lat=rep(lat,length.out=length(lon)*length(lat)),
                     lon=rep(lon,each=length(lat)))
# ggplot(slopeDF,aes(x=lon,y=lat))+geom_tile(aes(fill=data))
aspectDF = data.frame(data=stack(data.frame(aspect))[,1],
                     lat=rep(lat,length.out=length(lon)*length(lat)),
                     lon=rep(lon,each=length(lat)))
# ggplot(aspectDF,aes(x=lon,y=lat))+geom_tile(aes(fill=data))

