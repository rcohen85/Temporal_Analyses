# CONSTRUCT GEEGLM
# ThisSite is daily counts of 5-min bins with presence, Jday is Julian day, and yearGroup is year
modJday = geeglm(
  thisSite ~ mSpline(Jday,knots=c(120,250),Boundary.knots=c(1,365),periodic=T)+as.factor(yearGroup),
  family = poisson(link = "log"),
  id = reducedClustID, # grouping variable to account for autocorrelation
  corstr = "ar1")


# BOOTSTRAP GEEGLM PARAMETER ESTIMATES based on estimated means and variances, 
# for later construction of confidence intervals
BootstrapParameters <-
  rmvnorm(10000, coef(modJday), summary(modJday)$cov.unscaled)
JDayBootstrapCoefs <- BootstrapParameters[, 2:3]
YearBootstrapCoefs <- BootstrapParameters[, c(1, 4:6)]

# reconstruct model matrix (not sure why we need this)
testJday <- glm(thisSite ~ bs(Jday, knots = mean(Jday)) +
                  as.factor(yearGroup),
                family = poisson)
Jx1 <- model.matrix(testJday)[, 2:3] %*% coef(modJday)[c(2:3)] # multiply by coefficients to 
# Jx2 <- model.matrix(testJday)[, c(1, 4:6)] %*% coef(modJday)[c(1, 4:6)]


# PLOT GEEGLM PARTIAL RESIDUALS
# Julian Day
JDayForPlotting<- seq(min(Jday), max(Jday), length=50)
# get basis functions for smooth of Julian day
Basis<- mSpline(JDayForPlotting,knots=c(120,250),Boundary.knots=c(1,365),periodic=T) 
# multiply basis functions by model coefficients to get each piece of the spline
RealFit<- Basis%*%coef(modJday)[c(2:3)] 
# adjust offsets to link up spline pieces
RealFitCenterJ<- RealFit-mean(Jx1)-coef(modJday)[1] 
# get spread of piecewise spline values based on distributions of each coefficient
JDayBootstrapFits<- Basis%*%t(JDayBootstrapCoefs) 
# get quantiles for confidence interval of smooth function estimate
quant.func<- function(x){quantile(x, probs=c(0.025,0.975))}
cisJ<-apply(JDayBootstrapFits, 1, quant.func) 
Jcil<-cisJ[1,]-mean(Jx1)-coef(modJday)[1] # upper CI bound
Jciu<-cisJ[2,]-mean(Jx1)-coef(modJday)[1] # lower CI bound
MinimumYlimJ<- min(cisJ-mean(Jx1)-coef(modJday)[1]) # ylims for plotting
MaximumYlimJ<- max(cisJ-mean(Jx1)-coef(modJday)[1])
saveName = paste(seasDir,'/', CTname,'/',sites[j],"_GEEGLM_JDayPlot.png",sep ="")
qplot(
  JDayForPlotting,
  RealFitCenterJ,
  xlab = "Julian Day",
  ylab = "s(Julian Day)",
  main = paste(CTname, 'at', sites[j]),
  ylim = c(MinimumYlimJ, MaximumYlimJ),
  geom = "line") + 
  theme(axis.line = element_line(),
  panel.background = element_blank(),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank()) + 
  geom_smooth(fill = "grey",
  colour =
    "black",
  aes(ymin =
        Jcil, ymax = Jciu),
  stat =
    "identity") + 
  geom_rug(aes(x = Jday, y = -10000))

ggsave(saveName, device = "png")

while (dev.cur() > 1) { #close graphics device
  dev.off()}

# Year
# Center intercept (1st level of year factor) at 0 and show other levels relative to it
AdjustedYearCoefs = data.frame(
  YearBootstrapCoefs[, 1] - mean(YearBootstrapCoefs[, 1]),
  YearBootstrapCoefs[, 2],
  YearBootstrapCoefs[, 3],
  YearBootstrapCoefs[, 4])
colnames(AdjustedYearCoefs) = c("2016", "2017", "2018", "2019")
# AdjustedYearCoefs = apply(AdjustedYearCoefs,2,exp) return to units of response var?

saveName = paste(seasDir,'/',CTname,'/',sites[j],"_GEEGLM_YearPlot.png",sep="")
png(saveName, width = 500, height = 400)
boxplot(AdjustedYearCoefs,
  main=paste(CTname,'at',sites[j]),
  outline = FALSE,
  ylab = c("Year Coefficients"))

while (dev.cur() > 1) { # close graphics device
  dev.off()}