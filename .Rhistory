j=1
thisCT = data.frame(read.csv(tsFileList[i]))  # load file
attribs = attributes(thisCT)  # find names of sites (all columns but first)
sites = attribs$names[-1]
CTname = str_remove(tsFileList[i],paste(tsDir,'/',sep="")) # get the species/CT name
CTname = str_remove(CTname,paste('_',int,'.csv',sep=""))
if (str_detect(CTname,"Atl")){
CTname = "Gervais"
}
#dateVec = as.POSIXlt(thisCT$Date,tz="GMT",format="%d-%b-%Y")
if (int=="Daily") {
dateVec = as.POSIXlt(thisCT$Date,format="%d-%b-%Y",tz="GMT")
} else if (int=="Hourly") {
dateVec = as.POSIXlt(thisCT$Hour,format="%d-%b-%Y %H:%M:%S",tz="GMT")
} else if (int=="5minBin") {
dateVec = as.POSIXct(thisCT$Bin,format="%d-%b-%Y %H:%M:%S",tz="GMT")
}
numClicks = as.numeric(thisCT[,j+1]) # get presence data for this site
#pres = which(numClicks!=0)
if (any(i==c(11,16:19))){
pres = which(numClicks>=50) # consider dolphins "present" if more than 50 clicks in bin
} else if (any(i==c(1,2,4,8,13:15))){
pres = which(numClicks>=20) # consider BWs/Kogia/Pm "present" if more than 20 clicks in bin
}
Presence = rep(0,length(numClicks))
Presence[pres] = 1
# Determine autocorrelation and create grouping variable for GEEGLMs
corr = acf(Presence[1:50000],lag.max=1500,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
#itsVal = IntegralTimeScaleCalc(numClicks[1:50000])
numClust = length(numClicks)/(lagID[1]-1)
if (numClust<length(numClicks)){
clustID = rep(1:ceiling(numClust),each=lagID[1])
clustID = clustID[1:numel(numClicks)]
} else {
clustID = 1:length(numClicks)
}
# remove days/hours with no effort, create Julian day and year variables
noDat = which(is.na(numClicks))
if (!numel(noDat) == 0) {
numClicks = numClicks[-noDat]
Presence = Presence[-noDat]
reducedDateVec = dateVec[-noDat]
reducedClustID = clustID[-noDat]
Jday = as.numeric(format(reducedDateVec, "%j"))
yearGroup = year(reducedDateVec)
} else if (numel(noDat) == 0) {
reducedDateVec = dateVec
reducedClustID = clustID
Jday = as.numeric(format(reducedDateVec, "%j"))
yearGroup = year(reducedDateVec)
}
# code for study year
yrCode = rep(NaN,length(reducedDateVec))
yrCode[which(reducedDateVec < (dateStart + (60*60*24*365)))] = 1
yrCode[which(reducedDateVec >= (dateStart + (60*60*24*365)))] = 2
yrCode[which(reducedDateVec >= (dateStart + (60*60*24*365*2)))] = 3
if (j == 7) {
# create variable coding for change of site at HAT
hatSite = rep(2, length(reducedDateVec))
hatAdates = which(reducedDateVec <= as.POSIXlt("2017-02-06 00:00:00",
format="%Y-%m-%d %H:%M:%S",tz="GMT"))
hatSite[hatAdates] = 1
}
# account for leap day in 2016, shift Julian days by value of 1
# (so we don't try modeling Julian day 366 based on 1 data point)
leapIdx = which(yearGroup==2016)
Jday[leapIdx] = Jday[leapIdx]-1
# # round presence data back to integers so it's Poisson distributed again
# numClicks = round(numClicks)
# load normalized bin times
whichNormTimeFile = str_detect(normTimeFileList,sites[j])
normTimes = data.frame(read.csv(normTimeFileList[whichNormTimeFile]))  # load file
normBinTimes = normTimes$Bin[-noDat]
# get lunar illuminance data
illum = getMoonIllumination(date=as.character(reducedDateVec),keep="fraction")
illum = illum[,2]
# get day phase data
dayData = getSunlightTimes(date=seq.Date(as.Date(dateStart),as.Date(dateEnd),by=1),
lat=lats[j],lon=lons[j],
keep=c("nauticalDawn","sunrise","sunset","nauticalDusk"),
tz="UTC")
dayData = dayData[,4:7]
phaseBins = as.POSIXct(c(t(dayData)),format="%Y-%m-%d %H:%M:%S",tz="GMT")
tooLate = which(phaseBins>=dateEnd)
phaseBins = phaseBins[-tooLate]
phaseBins = c(dateStart,phaseBins,dateEnd)
phaseVec = rep(list("Night","Dawn","Day","Dusk"),length.out=length(phaseBins)-1)
# find which day phase each bin falls into
whichBin = histc(as.numeric(reducedDateVec),as.numeric(phaseBins))
# create vector coding for day phase
dayPhase = phaseVec[whichBin$bin]
# stitch everything together in a data frame
if (j!=7){
master = cbind(Presence,as.character(reducedDateVec),reducedClustID,Jday,yearGroup,yrCode,normBinTimes,dayPhase,illum)
colnames(master) = c("Presence","TimeStamp","GroupID","JulianDay","Year","StudyYear","NormTime","DayPhase","LunarIllum")
} else if (j==7){
master = cbind(Presence,as.character(reducedDateVec),reducedClustID,Jday,yearGroup,yrCode,normBinTimes,dayPhase,illum,hatSite)
colnames(master) = c("Presence","TimeStamp","GroupID","JulianDay","Year","StudyYear","NormTime","DayPhase","LunarIllum","HATSite")
}
nb = which(dayPhase=="Dusk" | dayPhase=="Night" | dayPhase=="Dawn")
nightBins = reducedDateVec[nb]
nightPresence = Presence[nb]
nightPhase = dayPhase[nb]
# get times when moon is up
lunTime = getMoonTimes(date=seq.Date(as.Date(dateStart),as.Date(dateEnd+(60*60*24)),by=1),
lat=lats[j],lon=lons[j],
keep=c("rise","set"),
tz="UTC")
lunR = lunTime[,4]; lunR = lunR[is.na(lunR)==0] # some NAs showing up, get rid of them
lunS = lunTime[,5]; lunS = lunS[is.na(lunS)==0]
# determine if each time bin is before, during, or after moon presence
nightBinDays = floor_date(nightBins,unit="days")
moonRiseDays = floor_date(lunR,unit="days")
moonSetDays = floor_date(lunS,unit="days")
allDays = unique(nightBinDays)
moonPres = matrix(nrow=length(nightBins),ncol=1)
for (k in allDays){
thisRise = lunR[which(moonRiseDays==k)] # time of this day's moon rise
thisSet = lunS[which(moonSetDays==k)] # time of this day's moon set
thisDay = which(nightBinDays==k) # which bins fall on this day
if (length(thisRise)>0 & length(thisSet)>0){ # if the moon both rises and sets on this day
# which bins on this day are before moon rise
preMoon = which(nightBins[thisDay]<thisRise)
moonPres[thisDay[preMoon]] = "Pre"
# which bins on this day are during moon up
moonUp = which(nightBins[thisDay]>=thisRise & nightBins[thisDay]<thisSet)
moonPres[thisDay[moonUp]] = "MoonUp"
# which bins on this day are after moon set
postMoon = which(nightBins[thisDay]>thisSet)
moonPres[thisDay[postMoon]] = "Post"
} else if (length(thisRise)>0 & length(thisSet)==0){ # if the moon rises on this day, but doesn't set
# which bins on this day are before moon rise
preMoon = which(nightBins[thisDay]<thisRise)
moonPres[thisDay[preMoon]] = "Pre"
# remainder of bins are during moon up
moonUp = setdiff(1:length(thisDay),preMoon)
moonPres[thisDay[moonUp]] = "MoonUp"
}  else if (length(thisRise)==0 & length(thisSet)>0){ # if the moon doesn't rise on this day, but does set
# which bins on this day are after moon set
postMoon = which(nightBins[thisDay]>thisSet)
moonPres[thisDay[postMoon]] = "Post"
# remainder of bins are during moon up
moonUp = setdiff(1:length(thisDay),postMoon)
moonPres[thisDay[moonUp]] = "MoonUp"
} else if (length(thisRise)==0 & length(thisSet)==0){ # if the moon doesn't rise or set on this day?
moonPres[thisDay] = "UhOh"
}
}
# get phase of moon
allMoonPhase = getMoonIllumination(date=as.character(nightBins),keep="phase")
moonPhase = allMoonPhase$phase
# load altitude and apparent magnitude data (downloaded from Tethys)
# Note: mag & alt data is only for when the moon is up, # bins in these files
# will not match # nightBins
lunFile = str_which(lunFileList,sites[j])
magAltDat = data.frame(read.csv(lunFileList[lunFile]))
keepInd = which(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
moonAlt = matrix(nrow=length(nightBins),ncol=1)
moonMag = matrix(nrow=length(nightBins),ncol=1)
take2 = match(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
plot(take2)
plot(keepInd)
keepInd = data.frame(which(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins))
take2 = data.frame(match(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins))
View(take2)
View(keepInd)
moonAlt[putWhere] = magAltDat$Elevation[keepInd]
keepInd = which(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
moonAlt = matrix(nrow=length(nightBins),ncol=1)
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonAlt[putWhere] = magAltDat$Elevation[keepInd]
moonMag[putWhere] = magAltDat$Magnitude[keepInd]
keepInd[is.na(keepInd)] = 0
keepInd = which(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
keepInd[is.na(keepInd)] = 0
putWhere[is.na(putWhere)] = 0
moonAlt = matrix(nrow=length(nightBins),ncol=1)
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonAlt[putWhere] = magAltDat$Elevation[keepInd]
moonMag[putWhere] = magAltDat$Magnitude[keepInd]
View(moonAlt)
nightBins[1]
keepInd = which(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
keepInd = keepInd[!is.na(keepInd)]
putWhere = putWhere[!is.na(putWhere)]
moonAlt = matrix(nrow=length(nightBins),ncol=1)
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonAlt[putWhere] = magAltDat$Elevation[keepInd]
moonMag[putWhere] = magAltDat$Magnitude[keepInd]
View(moonMag)
view(keepInd)
view(putWhere)
view(nightBins)
View(magAltDat)
# get altitude of moon
allMoonAlt = getMoonPosition(date=as.character(nightBins),keep="altitude")
# get altitude of moon
allMoonAlt = getMoonPosition(date=as.character(nightBins),lat=lats[j],lon=lons[j],keep="altitude")
View(allMoonAlt)
moonAlt = allMoonAlt$altitude
# load altitude and apparent magnitude data (downloaded from Tethys)
# Note: mag & alt data is only for when the moon is up, # bins in these files
# will not match # nightBins
lunFile = str_which(lunFileList,sites[j])
magAltDat = data.frame(read.csv(lunFileList[lunFile]))
keepInd = which(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magAltDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
keepInd = keepInd[!is.na(keepInd)]
putWhere = putWhere[!is.na(putWhere)]
moonEl = matrix(nrow=length(nightBins),ncol=1)
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonEl[putWhere] = magAltDat$Elevation[keepInd]
moonMag[putWhere] = magAltDat$Magnitude[keepInd]
view(moonAlt)
view(moonEl)
# get altitude of moon
allMoonAlt = getMoonPosition(date=as.character(nightBins),lat=lats[j],lon=lons[j],keep="altitude")
moonAlt = allMoonAlt$altitude
# get altitude of moon
allMoonAlt = getMoonPosition(date=as.character(nightBins),lat=lats[j],lon=lons[j],keep="altitude")
View(allMoonAlt)
view(nightBins)
view(moonMag)
moonElRad = moonEl*pi/180
view(moonElRad)
moonElRad = moonEl*(pi/180)
view(moonPres)
# load apparent magnitude data (downloaded from Tethys)
# Note: mag data is only for when the moon is up, # bins in these files
# will not match # nightBins
lunFile = str_which(lunFileList,sites[j])
magElDat = data.frame(read.csv(lunFileList[lunFile]))
keepInd = which(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
keepInd = keepInd[!is.na(keepInd)]
putWhere = putWhere[!is.na(putWhere)]
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonMag[putWhere] = magElDat$Magnitude[keepInd]
moonEl = matrix(nrow=length(nightBins),ncol=1)
moonEl[putWhere] = magElDat$Elevation[keepInd]
View(moonPres)
view(moonEl)
nightBins
view(nightBins)
corr = acf(nightPresence,lag.max=90,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
numClust = ceiling(length(nightPresence)/(lagID[1]-1))
if (numClust<length(nightPresence)){
clustID = rep(1:numClust,each=lagID[1])
clustID = clustID[1:length(nightPresence)]
} else {
clustID = 1:length(nightPresence)
}
# combine lunar variables into master data frame
masterLun = cbind(nightPresence,as.character(nightBins),nightPhase,moonPres,moonPhase,moonMag,moonAlt,clustID)
View(masterLun)
colnames(masterLun) = c("NightPres","NightBinTimes","NightPhase","MoonPres","MoonPhase","MoonMag","MoonAltitude","GroupID")
plot(masterLun$MoonPhase)
# combine lunar variables into master data frame
masterLun = cbind(nightPresence,as.character(nightBins),nightPhase,moonPres,moonPhase,moonMag,moonEl,clustID)
colnames(masterLun) = c("NightPres","NightBinTimes","NightPhase","MoonPres","MoonPhase","MoonMag","MoonAltitude","GroupID")
View(magElDat)
magTimeDiff = diff(magElDat$Date)
magTimeDiff = diff(as.numeric(magElDat$Date))
view(magTimeDiff)
magTimeDiff = diff(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"))
view(magTimeDiff)
skippedBins = which(magTimeDiff==dminutes(x=5))
skippedBins = which(magTimeDiff==dminutes(x=10))
view(moonMag)
view(keepInd)
view(putWhere)
view(skippedBins)
view(nightBins)
cbind(magElDat[skippedBins],magElDat[skippedBins+1])
missMag = apply(cbind(magElDat$Magnitude[skippedBins],magElDat$Magnitude[skippedBins+1]),MARGIN=1,mean)
missEl = apply(cbind(magElDat$Elevation[skippedBins],magElDat$Elevation[skippedBins+1]),MARGIN=1,mean)
view(missMag)
view(missEl)
missWhere = diff(putWhere)
missWhere = which(diff(putWhere)==2)
view(missWhere)
q = intersect(keepInd,skippedBins)
view(q)
keepSkippedBins = intersect(keepInd,skippedBins)
view(keepSkippedBins)
# some bins missing in magEl data, interpolate
magTimeDiff = diff(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"))
skippedBins = which(magTimeDiff==dminutes(x=10)) # time gaps
keepSkippedBins = intersect(keepInd,skippedBins)
missMag = apply(cbind(magElDat$Magnitude[keepSkippedBins],magElDat$Magnitude[keepSskippedBins+1]),MARGIN=1,mean)
missMag = apply(cbind(magElDat$Magnitude[keepSkippedBins],magElDat$Magnitude[keepSkippedBins+1]),MARGIN=1,mean)
missEl = apply(cbind(magElDat$Elevation[keepSkippedBins],magElDat$Elevation[keepSkippedBins+1]),MARGIN=1,mean)
moonMag[putWhere[missWhere]+1] = missMag
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonMag[putWhere] = magElDat$Magnitude[keepInd]
moonEl = matrix(nrow=length(nightBins),ncol=1)
moonEl[putWhere] = magElDat$Elevation[keepInd]
missWhere = which(diff(putWhere)==2) # indices which were skipped due to missing data
plot(c(magElDat$Date[keepSkippedBins],nightBins[putWhere[missWhere]+1]),cbind(rep(1,2472),rep(2,2480)))
putWhere = data.frame(putWhere)
View(putWhere)
view(missWhere)
putWhere2 = match(as.POSIXct(magElDat$Date[keepSkippedBins],format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins) # indices where data is missing
moonMag[putWhere2] = missMag
moonEl[putWhere2] = missEl
View(moonEl)
putWhere2
view(putWhere2)
# load apparent magnitude and elevation data (downloaded from Tethys)
# Note: data is only for when the moon is up, # bins in these files will not match # nightBins
lunFile = str_which(lunFileList,sites[j])
magElDat = data.frame(read.csv(lunFileList[lunFile]))
keepInd = which(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
keepInd = keepInd[!is.na(keepInd)]
putWhere = putWhere[!is.na(putWhere)]
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonMag[putWhere] = magElDat$Magnitude[keepInd]
moonEl = matrix(nrow=length(nightBins),ncol=1)
moonEl[putWhere] = magElDat$Elevation[keepInd]
putWhere2 = match(as.POSIXct(magElDat$Date[keepSkippedBins]+dminutes(x=5),format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins) # indices where data is missing
missBins = as.POSIXct(magElDat$Date[keepSkippedBins],format="%d-%b-%Y %H:%M:%S",tz="GMT")+dminutes(x=5)
missBins[1:10]
putWhere2 = match(missBins,nightBins) # indices where data is missing
view(putWhere2)
view(nightBins)
View(magAltDat)
view(keepSkippedBins)
# load apparent magnitude and elevation data (downloaded from Tethys)
# Note: data is only for when the moon is up, # bins in these files will not match # nightBins
lunFile = str_which(lunFileList,sites[j])
magElDat = data.frame(read.csv(lunFileList[lunFile]))
keepInd = which(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
keepInd = keepInd[!is.na(keepInd)]
putWhere = putWhere[!is.na(putWhere)]
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonMag[putWhere] = magElDat$Magnitude[keepInd]
moonEl = matrix(nrow=length(nightBins),ncol=1)
moonEl[putWhere] = magElDat$Elevation[keepInd]
# some bins missing in magEl data, interpolate
magTimeDiff = diff(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"))
skippedBins = which(magTimeDiff==dminutes(x=10)) # time gaps
keepSkippedBins = intersect(keepInd,skippedBins) # time gaps in night bins that we care about
missMag = apply(cbind(magElDat$Magnitude[keepSkippedBins],magElDat$Magnitude[keepSkippedBins+1]),MARGIN=1,mean)
missEl = apply(cbind(magElDat$Elevation[keepSkippedBins],magElDat$Elevation[keepSkippedBins+1]),MARGIN=1,mean)
missBins = as.POSIXct(magElDat$Date[keepSkippedBins],format="%d-%b-%Y %H:%M:%S",tz="GMT")+dminutes(x=5)
putWhere2 = match(missBins,nightBins) # indices where data is missing
moonMag[putWhere2] = missMag
moonEl[putWhere2] = missEl
view(moonMag)
view(moonEl)
# get nighttime bins (dusk/night/dawn)
nb = which(dayPhase=="Dusk" | dayPhase=="Night" | dayPhase=="Dawn")
nightBins = reducedDateVec[nb]
nightPresence = Presence[nb]
nightPhase = dayPhase[nb]
# get times when moon is up
lunTime = getMoonTimes(date=seq.Date(as.Date(dateStart),as.Date(dateEnd+(60*60*24)),by=1),
lat=lats[j],lon=lons[j],
keep=c("rise","set"),
tz="UTC")
lunR = lunTime[,4]; lunR = lunR[!is.na(lunR)] # some NAs showing up, get rid of them
lunS = lunTime[,5]; lunS = lunS[!is.na(lunS)]
# determine if each time bin is before, during, or after moon presence
nightBinDays = floor_date(nightBins,unit="days")
moonRiseDays = floor_date(lunR,unit="days")
moonSetDays = floor_date(lunS,unit="days")
allDays = unique(nightBinDays)
moonPres = matrix(nrow=length(nightBins),ncol=1)
for (k in allDays){
thisRise = lunR[which(moonRiseDays==k)] # time of this day's moon rise
thisSet = lunS[which(moonSetDays==k)] # time of this day's moon set
thisDay = which(nightBinDays==k) # which bins fall on this day
if (length(thisRise)>0 & length(thisSet)>0){ # if the moon both rises and sets on this day
# which bins on this day are before moon rise
preMoon = which(nightBins[thisDay]<thisRise)
moonPres[thisDay[preMoon]] = "Pre"
# which bins on this day are during moon up
moonUp = which(nightBins[thisDay]>=thisRise & nightBins[thisDay]<thisSet)
moonPres[thisDay[moonUp]] = "MoonUp"
# which bins on this day are after moon set
postMoon = which(nightBins[thisDay]>thisSet)
moonPres[thisDay[postMoon]] = "Post"
} else if (length(thisRise)>0 & length(thisSet)==0){ # if the moon rises on this day, but doesn't set
# which bins on this day are before moon rise
preMoon = which(nightBins[thisDay]<thisRise)
moonPres[thisDay[preMoon]] = "Pre"
# remainder of bins are during moon up
moonUp = setdiff(1:length(thisDay),preMoon)
moonPres[thisDay[moonUp]] = "MoonUp"
}  else if (length(thisRise)==0 & length(thisSet)>0){ # if the moon doesn't rise on this day, but does set
# which bins on this day are after moon set
postMoon = which(nightBins[thisDay]>thisSet)
moonPres[thisDay[postMoon]] = "Post"
# remainder of bins are during moon up
moonUp = setdiff(1:length(thisDay),postMoon)
moonPres[thisDay[moonUp]] = "MoonUp"
} else if (length(thisRise)==0 & length(thisSet)==0){ # if the moon doesn't rise or set on this day?
moonPres[thisDay] = "UhOh"
}
}
# get phase of moon
allMoonPhase = getMoonIllumination(date=as.character(nightBins),keep="phase")
moonPhase = allMoonPhase$phase
# # get altitude of moon; data are for all night bins, not just when moon is up
# allMoonAlt = getMoonPosition(date=as.character(nightBins),lat=lats[j],lon=lons[j],keep="altitude")
# moonAlt = allMoonAlt$altitude
# load apparent magnitude and elevation data (downloaded from Tethys)
# Note: data is only for when the moon is up, # bins in these files will not match # nightBins
lunFile = str_which(lunFileList,sites[j])
magElDat = data.frame(read.csv(lunFileList[lunFile]))
keepInd = which(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT") %in% nightBins)
putWhere = match(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"),nightBins)
keepInd = keepInd[!is.na(keepInd)]
putWhere = putWhere[!is.na(putWhere)]
moonMag = matrix(nrow=length(nightBins),ncol=1)
moonMag[putWhere] = magElDat$Magnitude[keepInd]
moonEl = matrix(nrow=length(nightBins),ncol=1)
moonEl[putWhere] = magElDat$Elevation[keepInd]
# some bins missing in magEl data, interpolate
magTimeDiff = diff(as.POSIXct(magElDat$Date,format="%d-%b-%Y %H:%M:%S",tz="GMT"))
skippedBins = which(magTimeDiff==dminutes(x=10)) # time gaps
keepSkippedBins = intersect(keepInd,skippedBins) # time gaps in night bins that we care about
missMag = apply(cbind(magElDat$Magnitude[keepSkippedBins],magElDat$Magnitude[keepSkippedBins+1]),MARGIN=1,mean)
missEl = apply(cbind(magElDat$Elevation[keepSkippedBins],magElDat$Elevation[keepSkippedBins+1]),MARGIN=1,mean)
missBins = as.POSIXct(magElDat$Date[keepSkippedBins],format="%d-%b-%Y %H:%M:%S",tz="GMT")+dminutes(x=5)
putWhere2 = match(missBins,nightBins) # indices where data is missing
moonMag[putWhere2] = missMag
moonEl[putWhere2] = missEl
# Determine autocorrelation and create grouping variable for GEEGLM
corr = acf(nightPresence,lag.max=90,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
numClust = ceiling(length(nightPresence)/(lagID[1]-1))
if (numClust<length(nightPresence)){
clustID = rep(1:numClust,each=lagID[1])
clustID = clustID[1:length(nightPresence)]
} else {
clustID = 1:length(nightPresence)
}
# combine lunar variables into master data frame
masterLun = cbind(nightPresence,as.character(nightBins),nightPhase,moonPres,moonPhase,moonMag,moonEl,clustID)
View(masterLun)
colnames(masterLun) = c("NightPres","NightBinTimes","NightPhase","MoonPres","MoonPhase","MoonMag","MoonAltitude","GroupID")
# make sure no magnitude or elevation data when moon is not up
moonMag[moonPres=="Pre"|moonPres=="Post"] = NA
moonEl[moonPres=="Pre"|moonPres=="Post"] = NA
# combine lunar variables into master data frame
masterLun = cbind(nightPresence,as.character(nightBins),nightPhase,moonPres,moonPhase,moonMag,moonEl,clustID)
colnames(masterLun) = c("NightPres","NightBinTimes","NightPhase","MoonPres","MoonPhase","MoonMag","MoonAltitude","GroupID")
5000/(12*24)
debugSource("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
debugSource("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
debugSource("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
load('J:/Chpt_2/ModelOutput/UD26/HAT_5minBin_Model_JDYr.Rdata')
PV
load('J:/Chpt_2/TimeSeries_ScaledByEffortError/Blainville_at_WAT_BP_5minBin_MasterLun.Rdata')
masterLun = data.frame(read.csv('J:/Chpt_2/TimeSeries_ScaledByEffortError/Blainville_at_WAT_BP_5minBin_MasterLun.csv'))
masterLun$MoonMag[is.na(masterLun$MoonMag)] = -3.5
masterLun$MoonAltitude[masterLun$MoonAltitude<1] = -1
masterLun$MoonAltitude[is.na(masterLun$MoonAltitude)] = -1
plot(masterLun$MoonPhase,masterLun$NightPres)
write.csv(masterLun,'C:/Users/RCohen/Desktop/Blainville_NightPres_LunarVars.csv',row.names=FALSE)
masterLun = data.frame(read.csv('J:/Chpt_2/TimeSeries_ScaledByEffortError/Blainville_at_WAT_BP_5minBin_MasterLun.csv'))
View(masterLun)
masterLun$MoonMag[is.na(masterLun$MoonMag)] = -3.5
masterLun$MoonAltitude[masterLun$MoonAltitude<0] = -1
masterLun$MoonAltitude[is.na(masterLun$MoonAltitude)] = -1
install.packages(c("backports", "BayesFactor", "broom", "car", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "forecast", "fs", "geepack", "generics", "ggstatsplot", "glue", "gmp", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "lmtest", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "renv", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tseries", "TTR", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("class", "foreign", "MASS", "Matrix", "nlme", "nnet", "rpart", "spatial"), lib="C:/Users/RCohen/AppData/Local/Temp/Rtmp6VsBg6/renv-system-library")
library(installr)
insall.Rtools(check=TRUE,check_r_update=TRUE,GUI=TRUE)
install.Rtools(check=TRUE,check_r_update=TRUE,GUI=TRUE)
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("backports", "BayesFactor", "broom", "carData", "cli", "conquer", "cpp11", "crayon", "datawizard", "DBI", "digest", "dtplyr", "effectsize", "expss", "fansi", "foreach", "fs", "generics", "ggstatsplot", "glue", "gmp", "gower", "htmlTable", "igraph", "insight", "jsonlite", "knitr", "magrittr", "memoise", "microseq", "nloptr", "openssl", "openxlsx", "parameters", "pillar", "PMCMRplus", "pracma", "quantreg", "Rcpp", "RcppArmadillo", "readr", "rio", "rlang", "sessioninfo", "SimDesign", "sp", "statsExpressions", "stringi", "SuppDists", "svglite", "terra", "tibble", "tidyr", "tinytex", "tzdb", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages("terra")
library(installr)
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
renv::record("renv@0.15.2")
