ggplot(PHDF
)+geom_col(aes(x=Edges,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=Edges,y=Pres),
fill='#66B2FF',
alpha=0.5
# ) + scale_x_continuous(breaks=c(0,0.5,1),
#                        label=c("New Moon","Full Moon","New Moon")
) + coord_cartesian(xlim=c(0,1)
) + labs(y="Normalized Presence Counts",x=NULL,title="MoonPhase"
) + theme_minimal()
PHedges
View(PHDF)
ggplot(PHDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=Edges,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(0,0.5,1),
label=c("New Moon","Full Moon","New Moon")
) + coord_cartesian(xlim=c(0,1)
) + labs(y="Normalized Presence Counts",x=NULL,title="MoonPhase"
) + theme_minimal()
PHedges = seq(0,1,by=0.05)
PHDF = data.frame(Obs=histc(masterLun$MoonPhase,edges=PHedges)$cnt[1:20]/dim(thisSite)[1],
Pres=histc(nightPresDF$MoonPhase,edges=PHedges)$cnt[1:20]/dim(presDF)[1],
BinCenter=seq(0.025,0.975,by=0.05))
ggplot(PHDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=Edges,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(0,0.5,1),
label=c("New Moon","Full Moon","New Moon")
) + coord_cartesian(xlim=c(0,1)
) + labs(y="Normalized Presence Counts",x=NULL,title="MoonPhase"
) + theme_minimal()
ggplot(PHDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(0,0.5,1),
label=c("New Moon","Full Moon","New Moon")
) + coord_cartesian(xlim=c(0,1)
) + labs(y="Normalized Presence Counts",x=NULL,title="MoonPhase"
) + theme_minimal()
PHedges = seq(0,1,by=0.05)
PHDF = data.frame(Obs=histc(masterLun$MoonPhase,edges=PHedges)$cnt[1:20]/dim(masterLun)[1],
Pres=histc(nightPresDF$MoonPhase,edges=PHedges)$cnt[1:20]/dim(nightPresDF)[1],
BinCenter=seq(0.025,0.975,by=0.05))
ggplot(PHDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(0,0.5,1),
label=c("New Moon","Full Moon","New Moon")
) + coord_cartesian(xlim=c(0,1)
) + labs(y="Normalized Presence Counts",x=NULL,title="MoonPhase"
) + theme_minimal()
Altedges = seq(-90,90,by=10)
AltDF = data.frame(Obs=histc(masterLun$MoonAltitude,edges=Altedges)$cnt[1:18]/dim(masterLun)[1],
Pres=histc(nightPresDF$MoonPhase,edges=Altedges)$cnt[1:18]/dim(nightPresDF)[1],
BinCenter=seq(-85,85,by=10))
View(AltDF)
Altedges = seq(-90,90,by=10)
AltDF = data.frame(Obs=histc(masterLun$MoonAltitude,edges=Altedges)$cnt[1:18]/dim(masterLun)[1],
Pres=histc(nightPresDF$MoonPhase,edges=Altedges)$cnt[1:18]/dim(nightPresDF)[1],
BinCenter=seq(-85,85,by=10))
ggplot(AltDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(-45,0,45),
label=c(paste("-45",intToUtf8(176),sep=""),
paste("0",intToUtf8(176),sep=""),
paste("45",intToUtf8(176),sep=""))
) + coord_cartesian(xlim=c(-90,90)
) + labs(y="Normalized Presence Counts",x=NULL,title="Moon Altitude"
) + theme_minimal()
Altedges = seq(-90,90,by=10)
AltDF = data.frame(Obs=histc(masterLun$MoonAltitude,edges=Altedges)$cnt[1:18]/dim(masterLun)[1],
Pres=histc(nightPresDF$MoonAltitude,edges=Altedges)$cnt[1:18]/dim(nightPresDF)[1],
BinCenter=seq(-85,85,by=10))
ggplot(AltDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(-45,0,45),
label=c(paste("-45",intToUtf8(176),sep=""),
paste("0",intToUtf8(176),sep=""),
paste("45",intToUtf8(176),sep=""))
) + coord_cartesian(xlim=c(-90,90)
) + labs(y="Normalized Presence Counts",x=NULL,title="Moon Altitude"
) + theme_minimal()
ggplot(AltDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(-90,-45,0,45,90),
label=c(paste("-90",intToUtf8(176),sep=""),
paste("-45",intToUtf8(176),sep=""),
paste("0",intToUtf8(176),sep=""),
paste("45",intToUtf8(176),sep=""),
paste("90",intToUtf8(176),sep=""),)
) + coord_cartesian(xlim=c(-90,90)
) + labs(y="Normalized Presence Counts",x=NULL,title="Moon Altitude"
) + theme_minimal()
ggplot(AltDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(-90,-45,0,45,90),
label=c(paste("-90",intToUtf8(176),sep=""),
paste("-45",intToUtf8(176),sep=""),
paste("0",intToUtf8(176),sep=""),
paste("45",intToUtf8(176),sep=""),
paste("90",intToUtf8(176),sep=""))
) + coord_cartesian(xlim=c(-90,90)
) + labs(y="Normalized Presence Counts",x=NULL,title="Moon Altitude"
) + theme_minimal()
Presedges = seq(0.5,3.5,by=1)
PresDF = data.frame(Obs=histc(masterLun$MoonPres,edges=Presedges)$cnt[1:3]/dim(masterLun)[1],
Pres=histc(nightPresDF$MoonPres,edges=Presedges)$cnt[1:3]/dim(nightPresDF)[1],
BinCenter=seq(1,3,by=1))
ggplot(PresDF
)+geom_col(aes(x=BinCenter,y=Obs),
fill='#bfbfbf',
alpha=0.6
)+geom_col(aes(x=BinCenter,y=Pres),
fill='#66B2FF',
alpha=0.5
) + scale_x_continuous(breaks=c(1,2,3),
label=c("Before","MoonUp","After")
) + coord_cartesian(xlim=c(0.5,3.5)
) + labs(y="Normalized Presence Counts",x=NULL,title="Moon Presence"
) + theme_minimal()
lunList[i]
Presedges
View(PresDF)
sum(nightPresDF$MoonPres==1)
sum(nightPresDF$MoonPres==2)
sum(nightPresDF$MoonPres==3)
source("D:/Code/Temporal_Analyses/Covar_hists.R", echo=TRUE)
source("D:/Code/Temporal_Analyses/Covar_hists.R", echo=TRUE)
debugSource("D:/Code/Temporal_Analyses/binned_residuals_NP.R", echo=TRUE)
debugSource("D:/Code/Temporal_Analyses/ModelPlotting.R", echo=TRUE)
binned_residuals_NP(tempMod)
debugSource("D:/Code/Temporal_Analyses/ModelPlotting.R", echo=TRUE)
binned_residuals_NP(tempMod)
debugSource("D:/Code/Temporal_Analyses/ModelPlotting.R", echo=TRUE)
binned_residuals_NP(tempMod)
model=tempMod
fv <- stats::fitted(model)
mf <- insight::get_data(model)
View(tempMod)
# mf <- insight::get_data(model)
mf = model$model
View(mf)
.recode_to_zero <- function(x) {
# check if factor
if (is.factor(x) || is.character(x)) {
# try to convert to numeric
x <- .factor_to_numeric(x)
}
# retrieve lowest category
minval <- min(x, na.rm = TRUE)
sapply(x, function(y) y - minval)
}
y <- .recode_to_zero(model$y) - fv
typeof(y)
typeof(fv)
pred <- mf[[term]]
pred <- fv
term=Presence
pred <- mf[[term]]
term="Presence"
pred <- mf[[term]]
pred <- fv
rm(term)
n_bins <- round(sqrt(length(pred))
)
breaks.index <- floor(length(pred) * (1:(n_bins - 1)) / n_bins)
breaks <- unique(c(-Inf, sort(pred)[breaks.index], Inf))
model.binned <- as.numeric(cut(pred, breaks))
d <- suppressWarnings(lapply(1:n_bins, function(.x) {
items <- (1:length(pred))[model.binned == .x]
model.range <- range(pred[items], na.rm = TRUE)
xbar <- mean(pred[items], na.rm = TRUE)
ybar <- mean(y[items], na.rm = TRUE)
n <- length(items)
sdev <- stats::sd(y[items], na.rm = TRUE)
data.frame(
xbar = xbar,
ybar = ybar,
n = n,
x.lo = model.range[1],
x.hi = model.range[2],
se = stats::qnorm(.975) * sdev / sqrt(n),
ci_range = sdev / sqrt(n)
)
}))
binned_residuals_NP(tempMod)
debugSource("D:/Code/Temporal_Analyses/binned_residuals_NP.R", echo=TRUE)
debugSource("D:/Code/Temporal_Analyses/binned_residuals_NP.R", echo=TRUE)
debugSource("D:/Code/Temporal_Analyses/binned_residuals_NP.R", echo=TRUE)
source("binned_residuals_NP.R")
debugSource("D:/Code/Temporal_Analyses/ModelPlotting.R", echo=TRUE)
source("D:/Code/Temporal_Analyses/binned_residuals_NP.R", echo=TRUE)
source("D:/Code/Temporal_Analyses/binned_residuals_NP.R", echo=TRUE)
source("D:/Code/Temporal_Analyses/binned_residuals_NP.R", echo=TRUE)
setwd("D:/Code/Temporal_Analyses")
source("D:/Code/HabitatModeling/reGrid_covars.R", echo=TRUE)
source("D:/Code/HabitatModeling/reGrid_covars.R", echo=TRUE)
source("D:/Code/HabitatModeling/reGrid_covars.R", echo=TRUE)
library(tidyverse)
library(lubridate)
library(geepack)
library(splines2)
library(pracma)
library(mgcv)
library(car)
library(stringr)
source("getPvalues.r")
modelDFDir = 'J:/Chpt_2/TimeSeries_ScaledByEffortError'
outDir = 'J:/Chpt_2/ModelOutput'
int = "5minBin"
dfList = list.files(path=modelDFDir,pattern=paste('*',int,'_Master.csv',sep=""),
full.names=TRUE,recursive=FALSE,
include.dirs=FALSE,no..=TRUE)
dfList
i=27
# load file
thisSite = data.frame(read.csv(dfList[i]))
CTname = str_remove(dfList[i],paste(modelDFDir,'/',sep="")) # get the species/CT name
site = str_remove(CTname,paste("_",int,"_Master.csv",sep=""))
site = sub(".*_","",site)
CTname = sub("_.*","",CTname)
if (str_detect(CTname,"Atl")){
CTname = "Gervais"
}
Pres = thisSite$Presence
GroupID = thisSite$GroupID
JDs = mSpline(thisSite$JulianDay,
knots=quantile(thisSite$JulianDay,probs=c(0.275,0.5,0.725)),
Boundary.knots=c(1,365),
periodic=T)
NTs = mSpline(thisSite$NormTime,
knots=quantile(thisSite$NormTime,probs=c(0.275,0.5,0.725)),
Boundary.knots=c(-1,1),
periodic=T)
YrF = as.factor(thisSite$StudyYear)
tempMod = geeglm(Pres~JDs
# +mSpline(numDayPhase,
#          knots=quantile(numDayPhase,probs=c(0.333,0.666)),
#          Boundary.knots=c(0.5,4.5),
#          periodic=T)
+NTs
# +as.factor(DayPhase)
+YrF,
family=binomial,
#data=thisSite,
id=GroupID,
corstr="ar1")
modelQIC = QIC(tempMod)
Pres = thisSite$Presence
GroupID = thisSite$GroupID
# JDs = mSpline(thisSite$JulianDay,
#               knots=quantile(thisSite$JulianDay,probs=c(0.275,0.5,0.725)),
#               Boundary.knots=c(1,365),
#               periodic=T)
# NTs = mSpline(thisSite$NormTime,
#               knots=quantile(thisSite$NormTime,probs=c(0.275,0.5,0.725)),
#               Boundary.knots=c(-1,1),
#               periodic=T)
JDs = mSpline(thisSite$JulianDay,
knots=quantile(thisSite$JulianDay,probs=c(0.2,0.4,0.6,0.8)),
Boundary.knots=c(1,365),
periodic=T)
NTs = mSpline(thisSite$NormTime,
knots=quantile(thisSite$NormTime,probs=c(0.2,0.4,0.6,0.8)),
Boundary.knots=c(-1,1),
periodic=T)
YrF = as.factor(thisSite$StudyYear)
View(tempMod)
tempMod2 = geeglm(Pres~JDs
# +mSpline(numDayPhase,
#          knots=quantile(numDayPhase,probs=c(0.333,0.666)),
#          Boundary.knots=c(0.5,4.5),
#          periodic=T)
+NTs
# +as.factor(DayPhase)
+YrF,
family=binomial,
#data=thisSite,
id=GroupID,
corstr="ar1")
modelQIC = c(modelQIC[1],QIC(tempMod2)[[1]])
rm(modelQIC)
QICcomp = c(QIC(tempMod)[[1]],QIC(tempMod2)[[1]])
tempMod3 = geeglm(Pres~JDs
# +mSpline(numDayPhase,
#          knots=quantile(numDayPhase,probs=c(0.333,0.666)),
#          Boundary.knots=c(0.5,4.5),
#          periodic=T)
+NTs
# +as.factor(DayPhase)
+JDs*NTs
+YrF,
family=binomial,
#data=thisSite,
id=GroupID,
corstr="ar1")
QICcomp = c(QIC(tempMod)[[1]],QIC(tempMod2)[[1]],QIC(tempMod3)[[1]])
QICcomp = c(QIC(tempMod)[[1]],QIC(tempMod2)[[1]]
)
1/6
48+16
64+16
1/6*c(1:6)
# JDs = mSpline(thisSite$JulianDay,
#               knots=quantile(thisSite$JulianDay,probs=c(0.275,0.5,0.725)),
#               Boundary.knots=c(1,365),
#               periodic=T)
# NTs = mSpline(thisSite$NormTime,
#               knots=quantile(thisSite$NormTime,probs=c(0.275,0.5,0.725)),
#               Boundary.knots=c(-1,1),
#               periodic=T)
JDs = mSpline(thisSite$JulianDay,
knots=quantile(thisSite$JulianDay,probs=c(0.1666,0.3333,0.5,0.666,.83333)),
Boundary.knots=c(1,365),
periodic=T)
NTs = mSpline(thisSite$NormTime,
knots=quantile(thisSite$NormTime,probs=c(0.1666,0.3333,0.5,0.666,.83333)),
Boundary.knots=c(-1,1),
periodic=T)
tempMod4 = geeglm(Pres~JDs
+NTs
# +JDs*NTs
+YrF,
family=binomial,
id=GroupID,
corstr="ar1")
QICcomp = c(QIC(tempMod)[[1]],QIC(tempMod2)[[1]],QIC(tempMod4)[[1]])
1/7*c(1:7)
1/7
source("D:/Code/Temporal_Analyses/exploreSplineFits.R", echo=TRUE)
source("D:/Code/Temporal_Analyses/exploreSplineFits.R", echo=TRUE)
View(BestJD2)
View(BestNormTime2)
238*251
View(QIC_Comp2)
library(ncdf4)
library(ggplot2)
library(EFDR)
# library(landsat)
library(sp)
file = 'J:/Chpt_3/GEBCO/gebco_2021_n44.0_s24.0_w-82.0_e-63.0.nc'
ncid = nc_open(file)
elev = data.frame(t(ncvar_get(ncid,'elevation')))
lat = ncvar_get(ncid,'lat')
lon = ncvar_get(ncid,'lon')
elDF = data.frame(z=stack(elev)[,1],
lat=rep(lat,length.out=length(lon)*length(lat)),
lon=rep(lon,each=length(lat)))
# Convert to a SpatialPointsDataFrame
coordinates(elDF) = ~lat+lon
proj4string(elDF) = CRS('+proj=longlat +datum=WGS84')
proj4string(elDF) = CRS('+proj=longlat +datum=WGS84')
# Source: https://stackoverflow.com/questions/64380342/turn-spatialpointsdataframe-to-spatialgriddataframe
# Transform to a SpatialPixelsDataFrame
SGDF = as(elDF,'SpatialPixelsDataFrame')
# Transform to a SpatialGridDataFrame
SGDF = as(SGDF,'SpatialGridDataFrame')
# Transform to a SpatialGridDataFrame
SGDF = as(SGDF,'SpatialGridDataFrame')
debugSource("D:/Code/Temporal_Analyses/slopeasp_RC.R", echo=TRUE)
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
library(landsat)
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
View(EWkernel)
View(NSkernel)
View(slope)
View(slope)
View(EW.mat)
slope <- (sqrt(EW.mat^2 + NS.mat^2)/smoothing)
View(slope)
slope <- (180/pi) * slope
View(slope)
View(EWkernel)
debugSource("D:/Code/Temporal_Analyses/wrangle_GEBCO.R", echo=TRUE)
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
Q
Q
Q
Q
Q
Q
Q
Q
debugSource("D:/Code/Temporal_Analyses/movingwindow_RC.R", echo=TRUE)
detach("package:landsat", unload = TRUE)
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)]
kernel
kernel * x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)]
Q
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
View(xmat)
xmat=xmat*(-1)
View(xmat)
Q
Q
library(ncdf4)
library(ggplot2)
library(EFDR)
# library(landsat)
source("slopeasp_RC.R")
source("movingwindow_RC.R")
library(sp)
file = 'J:/Chpt_3/GEBCO/gebco_2021_n44.0_s24.0_w-82.0_e-63.0.nc'
ncid = nc_open(file)
elev = data.frame(t(ncvar_get(ncid,'elevation')))
lat = ncvar_get(ncid,'lat')
lon = ncvar_get(ncid,'lon')
elDF = data.frame(data=stack(elev)[,1],
lat=rep(lat,length.out=length(lon)*length(lat)),
lon=rep(lon,each=length(lat)))
# Convert to a SpatialPointsDataFrame
coordinates(elDF) = ~lat+lon
proj4string(elDF) = CRS('+proj=longlat +datum=WGS84')
# Source: https://stackoverflow.com/questions/64380342/turn-spatialpointsdataframe-to-spatialgriddataframe
# Transform to a SpatialPixelsDataFrame
SGDF = as(elDF,'SpatialPixelsDataFrame')
# Transform to a SpatialGridDataFrame
SGDF = as(SGDF,'SpatialGridDataFrame')
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
Q
Q
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
kernel * x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)]
kernel
x=x*(-1)
kernel * x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)]
EW.mat <- movingwindow_RC(xmat, EWkernel)/EWres
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
xmat=xmat*(-1)
View(EW.mat)
EW.mat <- movingwindow_RC(xmat, EWkernel)/EWres
kernel * x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)]
sum(kernel * x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)], na.rm=na.rm)
View(newmat)
sum(kernel * x[(i-mwoffset):(i+mwoffset), (j-mwoffset):(j+mwoffset)], na.rm=na.rm)
EW.mat <- movingwindow_RC(xmat, EWkernel)/EWres
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
View(newmat)
is(results, "SpatialGridDataFrame")
is.data.frame(results)
is.matrix(results)
View(results)
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
xmat=xmat*(-1)
EW.mat <- movingwindow_RC(xmat, EWkernel)/EWres
if (missing(NSkernel)) {
NSkernel <- matrix(c(1/8, 2/8, 1/8, 0, 0, 0, -1/8, -2/8,
-1/8), ncol = 3, nrow = 3, byrow = TRUE)
}
elDF = data.frame(data=stack(elev)[,1]*(-1),
lat=rep(lat,length.out=length(lon)*length(lat)),
lon=rep(lon,each=length(lat)))
# Convert to a SpatialPointsDataFrame
coordinates(elDF) = ~lat+lon
proj4string(elDF) = CRS('+proj=longlat +datum=WGS84')
# Source: https://stackoverflow.com/questions/64380342/turn-spatialpointsdataframe-to-spatialgriddataframe
# Transform to a SpatialPixelsDataFrame
SGDF = as(elDF,'SpatialPixelsDataFrame')
# Transform to a SpatialGridDataFrame
SGDF = as(SGDF,'SpatialGridDataFrame')
# Calculate slope and aspect
SA = slopeasp_RC(SGDF)
