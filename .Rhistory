corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
masterLun = data.frame(read.csv('I:/TimeSeries_ScaledByEffortError/Sperm Whale_at_WAT_HZ_5minBin_MasterLun.csv'))
corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
masterLun = data.frame(read.csv('I:/TimeSeries_ScaledByEffortError/Sowerby_at_WAT_NC_5minBin_MasterLun.csv'))
corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
masterLun = data.frame(read.csv('I:/TimeSeries_ScaledByEffortError/Risso_at_JAX_5minBin_MasterLun.csv'))
corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
masterLun = data.frame(read.csv('I:/TimeSeries_ScaledByEffortError/Risso_at_HAT_5minBin_MasterLun.csv'))
corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
masterLun = data.frame(read.csv('I:/TimeSeries_ScaledByEffortError/Risso_at_WAT_NC_5minBin_MasterLun.csv'))
corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
masterLun = data.frame(read.csv('I:/TimeSeries_ScaledByEffortError/Risso_at_WAT_HZ_5minBin_MasterLun.csv'))
corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
masterLun = data.frame(read.csv('I:/TimeSeries_ScaledByEffortError/Risso_at_WAT_OC_5minBin_MasterLun.csv'))
corr = acf(masterLun$PropPres  ,lag.max=30,na.action=na.exclude,plot=TRUE)
# Determine autocorrelation and create grouping variable for GEEGLMs
corr = acf(masterLun$ProbPres,lag.max=30,na.action=na.exclude,plot=FALSE)
View(masterLun)
# Determine autocorrelation and create grouping variable for GEEGLMs
corr = acf(masterLun$PropPres,lag.max=30,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
lagID = which(abs(corr$acf)<0.3) # determine lag at which autocorrelation is <0.2
# Determine autocorrelation and create grouping variable for GEEGLMs
corr = acf(masterLun$PropPres,lag.max=60,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.3) # determine lag at which autocorrelation is <0.2
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
# Determine autocorrelation and create grouping variable for GEEGLM
corr = acf(masterLun$PropPres,lag.max=60,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
numClust = length(masterLun$PropPres)/(lagID[1]-1)
if (numClust<length(masterLun$PropPres)){
clustID = rep(1:ceiling(numClust),each=lagID[1])
clustID = clustID[1:numel(masterLun$PropPres)]
} else {
clustID = 1:length(masterLun$PropPres)
}
clustID = rep(1:ceiling(numClust),each=lagID[1])
numClust = ceiling(length(masterLun$PropPres)/(lagID[1]-1))
clustID = rep(1:ceiling(numClust),each=lagID[1])
clustID = rep(1:numClust,each=lagID[1])
# Determine autocorrelation and create grouping variable for GEEGLM
corr = acf(masterLun$PropPres,lag.max=60,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
numClust = ceiling(length(masterLun$PropPres)/(lagID[1]-1))
numClust<length(masterLun$PropPres)
clustID = rep(1:numClust,each=lagID[1])
clustID = clustID[1:numel(masterLun$PropPres)]
clustID = clustID[1:length(masterLun$PropPres)]
masterLun$GropuID = clustID
View(masterLun)
View(masterLun)
### Lunar Models
masterLun = data.frame(read.csv(dfList[i]))
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLun,
id=GroupID,
corstr="ar1")
library(geepack)
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLun,
id=GroupID,
corstr="ar1")
library(tidyverse)
library(lubridate)
library(geepack)
library(splines2)
library(SimDesign)
library(pracma)
library(mgcv)
library(car)
library(corrplot)
library(scales)
library(patchwork)
library(boot)
source("getPvalues.r")
modelDFDir = 'I:/TimeSeries_ScaledByEffortError'
outDir = 'I:/ModelOutput'
int = "5minBin"
dfList = list.files(path=modelDFDir,pattern=paste('*Master.csv',sep=""),
full.names=TRUE,recursive=FALSE,
include.dirs=FALSE,no..=TRUE)
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLun,
id=GroupID,
corstr="ar1")
View(masterLun)
masterLun$GroupID = clustID
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLun,
id=GroupID,
corstr="ar1")
View(lunMod)
# Fit GEEGLM:
lunModLin = glm(PropPres~AvgLunIllum+PropMoonUp,
family=poisson,
data=masterLun)
summary(lunModLin)
# Fit GEEGLM:
lunModLin = geeglm(PropPres~AvgLunIllum+PropMoonUp,
family=poisson,
data=masterLun,
id=GroupID,
corstr="ar1")
load('I:/ModelOutput/SmoothFitEval.Rdata')
View(BestJD)
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
hist(masterLun$PropPres)
hist(log(masterLun$PropPres))
hist(ln(masterLun$PropPres))
# Test whether to include Lunar Illuminance as a linear or a smooth term:
mod01 = geeglm(PropPres~AvgLunIllum,family=gamma,data=masterLun,id=GroupID,corstr="ar1")
# Test whether to include Lunar Illuminance as a linear or a smooth term:
mod01 = geeglm(PropPres~AvgLunIllum,family=poisson,data=masterLun,id=GroupID,corstr="ar1")
View(masterLun)
# Round Proportion of Presence to get it Poisson distributed
masterLun$PropPres = round(masterLun$PropPres*100,digits=0)
# load file
masterLun = data.frame(read.csv(lunList[i]))
plot(masterLun$PropPres[masterLun$PropPres>0])
# Round Proportion of Presence to get it Poisson distributed
masterLun$PropPres = round(masterLun$PropPres*100,digits=0)
plot(masterLun$PropPres[masterLun$PropPres>0])
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
unlist(knots[1])
knots=quantile(thisSite$LunarIllum,probs=unlist(knots[1]))
# knots = list(c(0.333,0.666),c(0.275,0.5,0.725))
knots = list(c(0.5),c(0.333,0.666))
quantile(thisSite$LunarIllum,probs=unlist(knots[1]))
lunList
mod03 = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(thisSite$LunarIllum,probs=unlist(knots[2])),
Boundary.knots=c(0,1)),
family=poisson,data=masterLun,id=GroupID,corstr="ar1")
mod02 = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(masterLun$AvgLunIllum,probs=unlist(knots[1])),
Boundary.knots=c(0,1)),
family=poisson,data=masterLun,id=GroupID,corstr="ar1")
mod03 = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(masterLun$AvgLunIllum,probs=unlist(knots[2])),
Boundary.knots=c(0,1)),
family=poisson,data=masterLun,id=GroupID,corstr="ar1")
QICLunIllum = c(QIC(mod01)[[1]],QIC(mod02)[[1]],QIC(mod03)[[1]])
mod04 = geeglm(PropPres~PropMoonUp,family=poisson,data=masterLun,id=GroupID,corstr="ar1")
mod05 = geeglm(PropPres~mSpline(PropMoonUp,
knots=quantile(masterLun$PropMoonUp,probs=unlist(knots[1])),
Boundary.knots=c(0,1)),
family=poisson,data=masterLun,id=GroupID,corstr="ar1")
mod06 = geeglm(PropPres~mSpline(PropMoonUp,
knots=quantile(masterLun$PropMoonUp,probs=unlist(knots[2])),
Boundary.knots=c(0,1)),
family=poisson,data=masterLun,id=GroupID,corstr="ar1")
QICPropMoonUp = c(QIC(mod04)[[1]],QIC(mod05)[[1]],QIC(mod06)[[1]])
# mod05 = geeglm(Presence~mSpline(JulianDay,
#                                 knots=quantile(thisSite$JulianDay, probs=unlist(knots[2])),
#                                 Boundary.knots=c(1,365),
#                                 periodic=T),
#                family=binomial,data=thisSite,id=GroupID,corstr="ar1")
# QICJD = c(QIC(mod04)[[1]],QIC(mod05)[[1]])
#
#
# numKnots_QIC_Comp[i,] = cbind(QIC(mod01)[[1]],QIC(mod02)[[1]],QIC(mod03)[[1]],
#                      QIC(mod04)[[1]],QIC(mod05)[[1]])
LunKnots_QIC_Comp[i,] = cbind(QIC(mod01)[[1]],QIC(mod02)[[1]],QIC(mod03)[[1]],
QIC(mod04)[[1]],QIC(mod05)[[1]],QIC(mod065)[[1]])
# mod05 = geeglm(Presence~mSpline(JulianDay,
#                                 knots=quantile(thisSite$JulianDay, probs=unlist(knots[2])),
#                                 Boundary.knots=c(1,365),
#                                 periodic=T),
#                family=binomial,data=thisSite,id=GroupID,corstr="ar1")
# QICJD = c(QIC(mod04)[[1]],QIC(mod05)[[1]])
#
#
# numKnots_QIC_Comp[i,] = cbind(QIC(mod01)[[1]],QIC(mod02)[[1]],QIC(mod03)[[1]],
#                      QIC(mod04)[[1]],QIC(mod05)[[1]])
LunKnots_QIC_Comp[i,] = cbind(QIC(mod01)[[1]],QIC(mod02)[[1]],QIC(mod03)[[1]],
QIC(mod04)[[1]],QIC(mod05)[[1]],QIC(mod06)[[1]])
View(LunKnots_QIC_Comp)
LunKnots_QIC_Comp = data.frame(LunIllumLin=as.numeric(),
LunIllum3=as.numeric(),
LunIllum4=as.numeric(),
MoonPropLin=as.numeric(),
MoonProp3=as.numeric(),
MoonProp4=as.numeric())
# mod05 = geeglm(Presence~mSpline(JulianDay,
#                                 knots=quantile(thisSite$JulianDay, probs=unlist(knots[2])),
#                                 Boundary.knots=c(1,365),
#                                 periodic=T),
#                family=binomial,data=thisSite,id=GroupID,corstr="ar1")
# QICJD = c(QIC(mod04)[[1]],QIC(mod05)[[1]])
#
#
# numKnots_QIC_Comp[i,] = cbind(QIC(mod01)[[1]],QIC(mod02)[[1]],QIC(mod03)[[1]],
#                      QIC(mod04)[[1]],QIC(mod05)[[1]])
LunKnots_QIC_Comp[i,] = cbind(QIC(mod01)[[1]],QIC(mod02)[[1]],QIC(mod03)[[1]],
QIC(mod04)[[1]],QIC(mod05)[[1]],QIC(mod06)[[1]])
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
lunList[i]
View(corr)
acf(masterLun$PropPres,lag.max=60,na.action=na.exclude)
# Determine autocorrelation and create grouping variable for GEEGLM
corr = acf(masterLun$PropPres,lag.max=90,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
View(BestLunIllum)
View(BestMoonPropUp)
lunList
View(LunKnots_QIC_Comp)
BestLunIllum = data.frame(colnames(LunKnots_QIC_Comp)[unlist(data.frame(apply(LunKnots_QIC_Comp[,1:3],1,which.min)))])
colnames(BestLunIllum) = "BestModel"
zed = unlist(data.frame(apply(LunKnots_QIC_Comp[,1:3],1,which.min)))
BestMoonPropUp = data.frame(colnames(LunKnots_QIC_Comp)[(unlist(data.frame(apply(LunKnots_QIC_Comp[,4:5],1,which.min))))+2])
colnames(BestMoonPropUp) = "BestModel"
BestMoonPropUp = data.frame(colnames(LunKnots_QIC_Comp)[(unlist(data.frame(apply(LunKnots_QIC_Comp[,4:5],1,which.min))))+3])
colnames(BestMoonPropUp) = "BestModel"
View(masterLun)
startInd = which(masterLun$NightStart>=as.POSIXct('2017-05-01 00:00:00',format="%Y-%m-%d %H:%M:%S",tz="GMT"))
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
View(masterLun)
source("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
source("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
debugSource("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
dayData = dayData[,4:7]
# get day phase data
dayData = getSunlightTimes(date=seq.Date(as.Date(dateStart),as.Date(dateEnd),by=1),
lat=lats[j],lon=lons[j],
keep=c("nauticalDawn","sunrise","sunset","nauticalDusk"),
tz="UTC")
dayData = dayData[,4:7]
phaseBins = as.POSIXlt(c(t(dayData)),format="%Y-%m-%d %H:%M:%S",tz="GMT")
tooLate = which(phaseBins>=dateEnd)
phaseBins = phaseBins[-tooLate] # cutting out some good bins??
phaseBins = c(dateStart,phaseBins,dateEnd)
dateStart
dateEnd
dateStart = as.POSIXlt(start,format="%Y-%m-%d %H:%M:%S",tz="GMT");
dateEnd = as.POSIXlt(end,format="%Y-%m-%d %H:%M:%S",tz="GMT");
phaseBins = c(dateStart,phaseBins,dateEnd)
dateStart = as.POSIXct(start,format="%Y-%m-%d %H:%M:%S",tz="GMT");
dateEnd = as.POSIXct(end,format="%Y-%m-%d %H:%M:%S",tz="GMT");
phaseBins = as.POSIXct(c(t(dayData)),format="%Y-%m-%d %H:%M:%S",tz="GMT")
tooLate = which(phaseBins>=dateEnd)
phaseBins = phaseBins[-tooLate]
phaseBins = c(dateStart,phaseBins,dateEnd)
phaseVec = rep(list("Night","Dawn","Day","Dusk"),length.out=length(phaseBins)-1)
phaseBins[1:5]
debugSource("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
source("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
acf(nightPresProp,lag.max=60,na.action=na.exclude)
# Determine autocorrelation and create grouping variable for GEEGLM
corr = acf(nightPresProp,lag.max=90,na.action=na.exclude,plot=FALSE)
lagID = which(abs(corr$acf)<0.2) # determine lag at which autocorrelation is <0.2
numClust = ceiling(length(nightPresProp)/(lagID[1]-1))
source("D:/Code/Temporal_Analyses/DataWrangling_forModeling.R")
source("D:/Code/Temporal_Analyses/Temporal_Models.R")
source("D:/Code/Temporal_Analyses/Temporal_Models.R")
# Round Proportion of Presence to get it Poisson distributed
masterLun$PropPres = round(masterLun$PropPres*100,digits=0)
test=round(masterLun$PropPres*100,digits=0)
debugSource("D:/Code/Temporal_Analyses/Temporal_Models.R")
source("D:/Code/Temporal_Analyses/Temporal_Models.R")
dfList
# load file
thisSite = data.frame(read.csv(dfList[i]))
CTname = str_remove(dfList[i],paste(modelDFDir,'/',sep="")) # get the species/CT name
site = str_remove(CTname,paste("_",int,"_Master.csv",sep=""))
site = sub(".*_","",site)
CTname = sub("_.*","",CTname)
if (str_detect(CTname,"Atl")){
CTname = "Gervais"
}
if (site=="HAT"){ # for HAT, only model 2017-2019
startInd = which(thisSite$StudyYear>1)
thisSiteTruncated = thisSite[startInd,]
tempMod = geeglm(Presence~mSpline(JulianDay,
knots=quantile(JulianDay,probs=c(0.275,0.5,0.725)),
Boundary.knots=c(1,365),
periodic=T)
+as.factor(StudyYear),
family=binomial,
data=thisSiteTruncated,
id=GroupID,
corstr="ar1")
} else {
tempMod = geeglm(Presence~mSpline(JulianDay,
knots=quantile(JulianDay,probs=c(0.275,0.5,0.725)),
Boundary.knots=c(1,365),
periodic=T)
+as.factor(StudyYear),
family=binomial,
data=thisSite,
id=GroupID,
corstr="ar1")
}
PV = getPvalues(tempMod)
sinkName = paste(outDir,'/',CTname,'/',site,"_",int,"_GEEGLMSummary_JDYr.txt",sep="")
sink(sinkName)
print(PV)
sink()
save(tempMod,PV,file=paste(outDir,'/',CTname,'/',site,"_",int,"_Model_JDYr.Rdata",sep=""))
### Lunar Models
masterLun = data.frame(read.csv(lunList[i]))
CTname = str_remove(dfList[i],paste(modelDFDir,'/',sep="")) # get the species/CT name
site = str_remove(CTname,paste("_",int,"_Master.csv",sep=""))
site = sub(".*_","",site)
CTname = sub("_.*","",CTname)
if (str_detect(CTname,"Atl")){
CTname = "Gervais"
}
# Round Proportion of Presence to get it Poisson distributed
masterLun$PropPres = round(masterLun$PropPres*100,digits=0)
# Fit GEEGLM:
if (site=="HAT"){
startInd = which(masterLun$NightStart>=as.POSIXct('2017-05-01 00:00:00',format="%Y-%m-%d %H:%M:%S",tz="GMT"))
masterLunTruncated = masterLun[startInd,]
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.5)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLunTruncated,
id=GroupID,
corstr="ar1")
} else {
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.5)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLun,
id=GroupID,
corstr="ar1")
}
LunPV = getPvalues(lunMod)
sinkName = paste(outDir,'/',CTname,'/',site,"_",int,"_GEEGLMSummary_Lun.txt",sep="")
sink(sinkName)
print(LunPV)
sink()
save(lunMod,LunPV,file=paste(outDir,'/',CTname,'/',site,"_",int,"_Model_Lun.Rdata",sep=""))
for (i in 1:numel(dfList)){
# load file
thisSite = data.frame(read.csv(dfList[i]))
CTname = str_remove(dfList[i],paste(modelDFDir,'/',sep="")) # get the species/CT name
site = str_remove(CTname,paste("_",int,"_Master.csv",sep=""))
site = sub(".*_","",site)
CTname = sub("_.*","",CTname)
if (str_detect(CTname,"Atl")){
CTname = "Gervais"
}
# Fit GEEGLM:
if (site=="HAT"){ # for HAT, only model 2017-2019
startInd = which(thisSite$StudyYear>1)
thisSiteTruncated = thisSite[startInd,]
tempMod = geeglm(Presence~mSpline(JulianDay,
knots=quantile(JulianDay,probs=c(0.275,0.5,0.725)),
Boundary.knots=c(1,365),
periodic=T)
+as.factor(StudyYear),
family=binomial,
data=thisSiteTruncated,
id=GroupID,
corstr="ar1")
} else {
tempMod = geeglm(Presence~mSpline(JulianDay,
knots=quantile(JulianDay,probs=c(0.275,0.5,0.725)),
Boundary.knots=c(1,365),
periodic=T)
+as.factor(StudyYear),
family=binomial,
data=thisSite,
id=GroupID,
corstr="ar1")
}
PV = getPvalues(tempMod)
sinkName = paste(outDir,'/',CTname,'/',site,"_",int,"_GEEGLMSummary_JDYr.txt",sep="")
sink(sinkName)
print(PV)
sink()
save(tempMod,PV,file=paste(outDir,'/',CTname,'/',site,"_",int,"_Model_JDYr.Rdata",sep=""))
### Lunar Models
masterLun = data.frame(read.csv(lunList[i]))
CTname = str_remove(dfList[i],paste(modelDFDir,'/',sep="")) # get the species/CT name
site = str_remove(CTname,paste("_",int,"_Master.csv",sep=""))
site = sub(".*_","",site)
CTname = sub("_.*","",CTname)
if (str_detect(CTname,"Atl")){
CTname = "Gervais"
}
# Round Proportion of Presence to get it Poisson distributed
masterLun$PropPres = round(masterLun$PropPres*100,digits=0)
# Fit GEEGLM:
if (site=="HAT"){
startInd = which(masterLun$NightStart>=as.POSIXct('2017-05-01 00:00:00',format="%Y-%m-%d %H:%M:%S",tz="GMT"))
masterLunTruncated = masterLun[startInd,]
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.5)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLunTruncated,
id=GroupID,
corstr="ar1")
} else {
lunMod = geeglm(PropPres~mSpline(AvgLunIllum,
knots=quantile(AvgLunIllum,probs=c(0.333,0.666)),
Boundary.knots=c(0,1))
+mSpline(PropMoonUp,
knots=quantile(AvgLunIllum,probs=c(0.5)),
Boundary.knots=c(0,1)),
family=poisson,
data=masterLun,
id=GroupID,
corstr="ar1")
}
LunPV = getPvalues(lunMod)
sinkName = paste(outDir,'/',CTname,'/',site,"_",int,"_GEEGLMSummary_Lun.txt",sep="")
sink(sinkName)
print(LunPV)
sink()
save(lunMod,LunPV,file=paste(outDir,'/',CTname,'/',site,"_",int,"_Model_Lun.Rdata",sep=""))
}
modelDFDir = 'I:/TimeSeries_ScaledByEffortError'
outDir = 'I:/ModelOutput'
int = "5minBin"
dfList = list.files(path=modelDFDir,pattern=paste('*Master.csv',sep=""),
full.names=TRUE,recursive=FALSE,
include.dirs=FALSE,no..=TRUE)
lunList = list.files(path=modelDFDir,pattern=paste('*MasterLun.csv',sep=""),
full.names=TRUE,recursive=FALSE,
include.dirs=FALSE,no..=TRUE)
species = list.dirs(outDir,recursive=FALSE)
i=1
JDmodFiles = list.files(path=species[i],pattern="*Model_JDYr.Rdata",
full.names=TRUE,recursive=FALSE,include.dirs=FALSE,no..=TRUE)
LunmodFiles = list.files(path=species[i],pattern="*Model_Lun.Rdata",
full.names=TRUE,recursive=FALSE,include.dirs=FALSE,no..=TRUE)
CTname = str_remove(species[i],paste(outDir,'/',sep=""))
sites = list()
j=1
site = str_remove(modFiles[j],paste(outDir,"/",CTname,"/",sep=""))
site = str_remove(JDmodFiles[j],paste(outDir,"/",CTname,"/",sep=""))
sites = c(sites,str_remove(site,"_5minBin_Model_JDYr.Rdata"))
load(JDmodFiles[j]) # load model
# find associated master dataframes
thisSpec = which(str_detect(dfList,CTname))
thisSite = which(str_detect(dfList,unlist(sites[j])))
thisModInd = intersect(thisSpec,thisSite)
thisSite = data.frame(read.csv(dfList[thisModInd]))
thisSpec = which(str_detect(lunList,CTname))
thisSite = which(str_detect(lunList,unlist(sites[j])))
thisModInd = intersect(thisSpec,thisSite)
masterLun = data.frame(read.csv(lunList[thisModInd])) # lunar model data frame
# find associated master dataframes
thisSpec = which(str_detect(dfList,CTname))
atSite = which(str_detect(dfList,unlist(sites[j])))
thisModInd = intersect(thisSpec,atSite)
thisSite = data.frame(read.csv(dfList[thisModInd])) # JD model data frame
thisSpec = which(str_detect(lunList,CTname))
atSite = which(str_detect(lunList,unlist(sites[j])))
thisModInd = intersect(thisSpec,atSite)
masterLun = data.frame(read.csv(lunList[thisModInd])) # lunar model data frame
View(tempMod)
# if (numel(JDKnots)==2){
#   JDind = c(2,3)
# } else {JDind = c(2:4)}
# if (numel(LunKnots)==2){
#   LunInd = JDind[length(JDind)]+c(1:5)
# } else if (numel(LunKnots)==3){
#   LunInd = JDind[length(JDind)]+c(1:6)
# }
# YrInd = c(1,LunInd[length(LunInd)]+c(1:2))
# #PhsInd = c(1,YrInd[length(YrInd)]+c(1:3))
JDind = c(2:4)
YrInd = c(1,5:6)
View(tempMod)
load(LunmodFiles[j]) # load Lunar model
View(lunMod)
View(masterLun)
