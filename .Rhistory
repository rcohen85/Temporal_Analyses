atan2(-1,-1)
atan2(1,-1)
degrees(atan2(1,1))
degrees(atan2(-1,1))
degrees(atan2(-1,-1))
degrees(atan2(1,-1))
90-135
ggplot(newGrid,aes(x=Lon,y=Lat))+geom_tile(aes(fill=Depth))
elev = t(ncvar_get(ncid,'elevation'))
lat = ncvar_get(ncid,'lat')
lon = ncvar_get(ncid,'lon')
# downsample data to 0.08x0.08 deg grid
thisData = data.frame(z=stack(data.frame(elev))[,1],
y=rep(lat,length.out=length(lon)*length(lat)),
x=rep(lon,each=length(lat)))
depthData = matrix(newGrid$Depth,ncol=length(newx),byrow=TRUE)
# get x/y/z components of unit vector normal to each grid point
depthRast = raster(depthData,
xmn=min(newx),xmx=max(newx),
ymn=min(newy),ymx=max(newy),
crs=CRS('+proj=longlat +datum=WGS84'))
debugSource("D:/Code/HabitatModeling/cgrad_RC.R", echo=TRUE)
g = cgrad_RC(depthRast)
mm[-rows,-cols]
q = mm[-rows,-cols]
View(mm)
View(mrd)
View(md)
View(mr)
q = (mm[-rows,-cols]+md-mr-mrd)
View(q)
r = (mm[-rows,-cols]-md+mr-mrd)
dlx*dly
View(cellgr[,,3])
n
View(g[,,3])
View(depthData)
g = cgrad_RC(depthData,dlx=9000,dly=9000)
View(cellgr[,,2])
n
# calculate slope
# floorSlope = slope(g,degrees=TRUE)
floorSlope = degrees(acos(g[,,3]))
slopeDF = data.frame(z=stack(data.frame(floorSlope))[,1],
y=rep(newy,length.out=length(newx)*length(newy)),
x=rep(newx,each=length(newy)))
ggplot(slopeDF,aes(x=x,y=y))+geom_tile(aes(fill=z))
latdiff = diff(lat)
latdiff[1:5]
111.321*0.004166667
111321*0.004166667
g2 = cgrad_RC(elev,dlx=463,dly=463)
# calculate slope
# floorSlope = slope(g,degrees=TRUE)
floorSlope = degrees(acos(g2[,,3]))
slopeDF = data.frame(z=stack(data.frame(floorSlope))[,1],
y=rep(newy,length.out=length(newx)*length(newy)),
x=rep(newx,each=length(newy)))
# slopeDF = data.frame(z=stack(data.frame(floorSlope))[,1],
#                        y=rep(newy,length.out=length(newx)*length(newy)),
#                        x=rep(newx,each=length(newy)))
slopeDF = data.frame(z=stack(data.frame(floorSlope))[,1],
y=rep(lat,length.out=length(lon)*length(lat)),
x=rep(lon,each=length(lat)))
ggplot(slopeDF,aes(x=x,y=y))+geom_tile(aes(fill=z))
install.packages("geodist")
install.packages("geodist")
library(geodist)
# Calculate distances between lat grid points and lon grid points in meters
latMat = cbind(lat,0)
View(latMat)
lonMat = cbind(0,lon)
View(lonMat)
latDist = geodist(latMat,sequential=TRUE,measure="geodesic")
colnames(latMat) = c('latitude','longitude')
# Calculate distances between lat grid points and lon grid points in meters
latMat = data.frame(cbind(lat,0))
colnames(latMat) = c('latitude','longitude')
lonMat = data.frame(cbind(0,lon))
colnames(lonMat) = c('latitude','longitude')
# Calculate distances between lat grid points and lon grid points in meters
dy=as.numeric()
dx=as.numeric()
i=1
j=1
latMat = data.frame(cbind(lat,lon[i]))
View(latMat)
colnames(latMat) = c('latitude','longitude')
lonMat = data.frame(cbind(lat[j],lon))
View(lonMat)
colnames(lonMat) = c('latitude','longitude')
latDist = geodist(latMat,sequential=TRUE,measure="geodesic")
lonDist = geodist(lonMat,sequential=TRUE,measure="geodesic")
ggplot(newGrid,aes(x=Lon,y=Lat))+geom_tile(aes(fill=Depth))
ggplot(newGrid2,aes(x=Lon,y=Lat))+geom_tile(aes(fill=Depth))
rm(newGrid2)
newGrid08 = newGrid
newx08 = newx
newy08 = newy
save(newGrid08,file=('J:/Chpt_3/GEBCO/DownsampledGrid_08.Rdata'))
ggplot(newGrid08,aes(x=Lon,y=Lat))+geom_tile(aes(fill=Depth))+labels(title="0.08deg Grid")
ggplot(newGrid08,aes(x=Lon,y=Lat))+geom_tile(aes(fill=Depth))+ggtitle("0.08deg Grid")
depthData08 = matrix(newGrid$Depth,ncol=length(newx08),byrow=TRUE)
save(newGrid,file=('J:/Chpt_3/GEBCO/DownsampledGrid_08deg.Rdata'))
rm(newGrid_sf)
rem(polygony)
rm(polygony)
rm(mesto)
rm(grid_spacing)
251*238
library(ncdf4)
library(ggplot2)
library(geodist)
file = 'J:/Chpt_3/GEBCO/gebco_2021_n44.0_s24.0_w-82.0_e-63.0.nc'
ncid = nc_open(file)
elev = t(ncvar_get(ncid,'elevation'))
lat = ncvar_get(ncid,'lat')
lon = ncvar_get(ncid,'lon')
# downsample data to coarser lat/lon grid
thisData = data.frame(z=stack(data.frame(elev))[,1],
y=rep(lat,length.out=length(lon)*length(lat)),
x=rep(lon,each=length(lat)))
newx = seq(278,297,by=0.04)
newy = seq(24,44,by=0.04)
newGrid = regrid(thisData,n1=length(newx),n2=length(newy),method="idw")
colnames(newGrid) = c("Lon","Lat","Depth")
View(newGrid)
ggplot(newGrid,aes(x=Lon,y=Lat))+geom_tile(aes(fill=Depth))+ggtitle("0.04deg Grid")
depthData = matrix(newGrid$Depth,ncol=length(newx08),byrow=TRUE)
save(newGrid,depthData,file=('J:/Chpt_3/GEBCO/DownsampledGrid_04deg.Rdata'))
depthData = matrix(newGrid$Depth,ncol=length(newx),byrow=TRUE)
save(newGrid,depthData,file=('J:/Chpt_3/GEBCO/DownsampledGrid_04deg.Rdata'))
ggsave('J:/Chpt_3/GEBCO/04deg_BathMap.png',device="png")
# Calculate distances between lat grid points and lon grid points in meters
dy=as.numeric()
dx=as.numeric()
i=1
j=1
latMat = data.frame(cbind(lat,lon[i]))
colnames(latMat) = c('latitude','longitude')
lonMat = data.frame(cbind(lat[j],lon))
colnames(lonMat) = c('latitude','longitude')
latDist = geodist(latMat,sequential=TRUE,measure="geodesic")
lonDist = geodist(lonMat,sequential=TRUE,measure="geodesic")
latDist = geodist(latMat,sequential=TRUE,measure="vincenty")
latDist[1:5]
longDist[1:5]
lonDist[1:5]
lonDist[4555:4559]
plot(latDist)
plot(lonDist)
View(latMat)
View(latMat)
plot(latMat$longitude,latMat$latitude,type="p")
plot(lonMat$longitude,lonMat$latitude,type="p")
latDist = geodist_vec(latMat$longitude,latMat$latitude,sequential=TRUE,measure="geodesic")
lonDist = geodist_vec(lonMat$longitude,lonMat$latitude,sequential=TRUE,measure="geodesic")
plot(latDist)
plot(lonDist)
View(latMat)
geodist(latMat[1:2,],sequential=TRUE,measure="geodesic")
geodist(latMat[4799:4800,],sequential=TRUE,measure="geodesic")
latMat[4799:4800,]
lonMat = data.frame(cbind(lat,lon[i]))
colnames(latMat) = c('latitude','longitude')
latMat = data.frame(cbind(lat[j],lon))
colnames(lonMat) = c('latitude','longitude')
lonMat[1:5,]
lonMat = data.frame(cbind(lat,lon[i],lat,lon[i+1]))
View(lonMat)
colnames(latMat) = c('lat1','lon1','lat2','lon2')
lonMat = data.frame(cbind(lat,lon[i],lat,lon[i+1]))
colnames(lonMat) = c('lat1','lon1','lat2','lon2')
lonMat = data.frame(cbind(lat[j],lon))
colnames(lonMat) = c('latitude','longitude')
View(lonMat)
lonDist = geodist_vec(lonMat$longitude,lonMat$latitude,sequential=TRUE,measure="geodesic")
plot(lonDist)
latMat = data.frame(cbind(lat,lon[i]))
colnames(latMat) = c('latitude','longitude')
View(latMat)
latDist = geodist_vec(latMat$longitude,latMat$latitude,sequential=TRUE,measure="geodesic")
lonDist = geodist_vec(lonMat$longitude,lonMat$latitude,sequential=TRUE,measure="geodesic")
View(latMat)
View(lonMat)
latDist = geodist_vec(latMat$longitude,latMat$latitude,sequential=TRUE,measure="geodesic")
lonDist = geodist_vec(lonMat$longitude,lonMat$latitude,sequential=TRUE,measure="geodesic")
plot(latDist)
plot(lonDist)
latDist[1:5]
dy = cbind(dy,t(latDist))
dx = rbind(dx,lonDist)
# Calculate distances between lat grid points and lon grid points in meters
dy=as.numeric()
dx=as.numeric()
for (i in 1:length(lon)){
for (j in 1:length(lat)){
latMat = data.frame(cbind(lat,lon[i]))
colnames(latMat) = c('latitude','longitude')
lonMat = data.frame(cbind(lat[j],lon))
colnames(lonMat) = c('latitude','longitude')
latDist = geodist_vec(latMat$longitude,latMat$latitude,sequential=TRUE,measure="geodesic")
lonDist = geodist_vec(lonMat$longitude,lonMat$latitude,sequential=TRUE,measure="geodesic")
dy = cbind(dy,t(latDist))
dx = rbind(dx,lonDist)
}
}
dy=as.numeric()
dx=as.numeric()
for (i in 1:length(newx)){
for (j in 1:length(newy)){
latMat = data.frame(cbind(newy,newx[i]))
colnames(latMat) = c('latitude','longitude')
lonMat = data.frame(cbind(newy[j],newx))
colnames(lonMat) = c('latitude','longitude')
latDist = geodist_vec(latMat$longitude,latMat$latitude,sequential=TRUE,measure="geodesic")
lonDist = geodist_vec(lonMat$longitude,lonMat$latitude,sequential=TRUE,measure="geodesic")
dy = cbind(dy,t(latDist))
dx = rbind(dx,lonDist)
}
}
View(dx)
# Calculate distances between lat grid points and lon grid points in meters
meshgrid(newx,newy)
library(pracma)
# Calculate distances between lat grid points and lon grid points in meters
meshgrid(newx,newy)
# Calculate distances between lat grid points and lon grid points in meters
[X,Y] = meshgrid(newx,newy)
# Calculate distances between lat grid points and lon grid points in meters
X = meshgrid(newx,newy)$X
Y = meshgrid(newx,newy)$Y
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(latMat)
plot(latDist)
plot(lonDist)
dy = cbind(dy,t(latDist))
dy=as.numeric()
# Calculate distances between lat grid points and lon grid points in meters
dy=as.numeric()
dx=as.numeric()
for (i in 1:length(newx)){
latMat = data.frame(cbind(newy,newx[i]))
colnames(latMat) = c('latitude','longitude')
latDist = geodist_vec(latMat$longitude,latMat$latitude,sequential=TRUE,measure="geodesic")
dy = cbind(dy,latDist)
}
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(latMat)
View(latMat)
plot(dy[,1])
plot(dy[,2])
plot(dy[,3])
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(dy)
colnames(dy) = as.character(newx)
View(dy)
rownames(dx) = as.character(newy)
dy = data.frame(dy)
View(dy)
colnames(dy) = as.character(newx)
rownames(dx) = as.character(newy)
colnames(dy) = as.character(newx)
rownames(dy) = as.character(newy)
View(latMat)
length(newy)
newy[-length(newy)]
rownames(dy) = as.character(newy[-length(newy)])
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(latMat)
View(dy)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(dy)
dy = rbind(dy,dy[length(dy),])
length(dy)
dy = rbind(dy,dy[dim(dy)[2],])
rownames(dy) = as.character(newy)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
diff(dy[497:500,1])
dy = rbind(dy,dy[dim(dy)[2],]+0.0312)
View(dy)
colnames(dy) = as.character(newx)
rownames(dy) = as.character(newy)
dim(dy)[2]
dim(dy)[1]
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(dy)
View(lonMat)
View(dx)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(dx)
dim(dy)[2]
dim(dx)[2]
dx = rbind(dx,dx[,dim(dx)[2]])
dx = cbind(dx,dx[,dim(dx)[2]])
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(dy)
View(dx)
colnames(dx) = as.character(newx)
rownames(dx) = as.character(newy)
View(dx)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
load('J:/Chpt_3/GEBCO/DownsampledGrid_04deg.Rdata')
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(dy)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
q=mm[-rows,-cols]
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
dlx
q=mm[-rows,-cols]
rows
cols
dlx=dlx[-rows,]
dly=dly[,-cols]
cellgr[-rows,-cols,2]=.5*dlx*(mm[-rows,-cols]+md-mr-mrd)
z=mm[-rows,-cols]+md-mr-mrd
q=dlx*z
dlx*(mm[-rows,-cols]+md-mr-mrd)
.5*dlx*(mm[-rows,-cols]+md-mr-mrd)
cellgr[-rows,-cols,2]=.5*dlx*(mm[-rows,-cols]+md-mr-mrd)
View(cellgr[,,2])
debugSource("D:/Code/HabitatModeling/cgrad_RC.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
ggplot(slopeDF,aes(x=x,y=y))+geom_tile(aes(fill=z))
# calculate aspect
floorAspect = (pi/2) - atan2(g[,,2],g[,,1])
floorAspect[floorAspect<0] = floorAspect[floorAspect<0]+(2*pi)
floorAspect = degrees(floorAspect)
aspectDF = data.frame(z=stack(data.frame(floorAspect))[,1],
y=rep(newy,length.out=length(newx)*length(newy)),
x=rep(newx,each=length(newy)))
# get x/y/z components of unit vector normal to each grid point
g = cgrad_RC(depthData,dlx=dx,dly=dy)
# calculate slope
floorSlope = degrees(acos(g[,,3]))
slopeDF = data.frame(z=stack(data.frame(floorSlope))[,1],
y=rep(newy,length.out=length(newx)*length(newy)),
x=rep(newx,each=length(newy)))
ggplot(slopeDF,aes(x=x,y=y))+geom_tile(aes(fill=z))
# calculate aspect
floorAspect = (pi/2) - atan2(g[,,2],g[,,1])
floorAspect[floorAspect<0] = floorAspect[floorAspect<0]+(2*pi)
floorAspect = degrees(floorAspect)
aspectDF = data.frame(z=stack(data.frame(floorAspect))[,1],
y=rep(newy,length.out=length(newx)*length(newy)),
x=rep(newx,each=length(newy)))
ggplot(aspectDF,aes(x=x,y=y))+geom_tile(aes(fill=z))
ggplot(aspectDF,aes(x=x,y=y))+geom_tile(aes(fill=z))+scale_fill_viridis
install.packages("viridis")
libarary(viridis)
library(viridis)
ggplot(aspectDF,aes(x=x,y=y))+geom_tile(aes(fill=z))+scale_fill_viridis
ggplot(aspectDF,aes(x=x,y=y))+geom_tile(aes(fill=z))+scale_fill_viridis()
ggplot(slopeDF,aes(x=x,y=y))+geom_tile(aes(fill=z))+scale_fill_viridis()
save(slopeDF,aspectDF,file='J:/Chpt_3/GEBCO/SlopeAspect_04deg.Rdata')
# Grab data points nearest to each HARP site, save time series
sites = c('HZ','OC','NC','BC','WC','NFC','HAT','GS','BP','BS','JAX')
HARPs = data.frame(t(data.frame(c(41.06165, -66.35155), # WAT_HZ
c(40.26333,-67.9861,40.22999, -67.97798),  # WAT_OC
c(39.83295, -69.98194),  # WAT_NC
c(39.19192, -72.22735),  # WAT_BC
c(38.37337, -73.36985),  # WAT_WC
c(37.16452, -74.46585),  # NFC
c(35.30183,-74.8789,35.5841,-74.7499),  # HAT_A & HAT_B
c(33.66992, -75.9977),   # WAT_GS
c(32.10527, -77.09067),  # WAT_BP
c(30.58295, -77.39002),  # WAT_BS
c(30.27818, -80.22085))))  # JAX_D
rownames(HARPs) = sites
colnames(HARPs) = c("Lat1", "Lon1", "Lat2", "Lon2")
HARPs$Lon1 = HARPs$Lon1+360
HARPs$Lon2 = HARPs$Lon2+360
slopeMat = matrix(nrow=11,ncol=2)
aspectMat = matrix(nrow=11,ncol=2)
View(HARPs)
m=1
j=1
paste('sitelat = which.min(abs(HARPs$Lat',j,'[m]-newy))',sep="")
HARPs$Lat1[m]
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
q=abs(HARPs$Lat',j,'[m]-newy)
paste('sitelat = which.min(abs(HARPs$Lat',j,'[m]-newy))',sep="")
q=abs(HARPs$Lat1[m]-newy)
newy[sitelat]
newx[sitelont]
newx[sitelon]
View(slopeMat)
source("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(slopeMat)
View(aspectMat)
View(slopeDF)
hist(slopeDF$z)
ggplot(newGrid,aes(x=Lon,y=Lat))+geom_tile(aes(fill=Depth))+ggtitle("0.04deg Grid")+scale_fill_viridis()
ggsave('J:/Chpt_3/GEBCO/04deg_BathMap.png',device="png")
detach(insol)
detach("insol")
detach(package:insol,unload=TRUE)
source("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
source("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
source("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/wrangle_GEBCO.R", echo=TRUE)
View(aspectMat)
View(slopeMat)
debugSource("D:/Code/HabitatModeling/makeHYCOM_TS.R", echo=TRUE)
unlist(Covars[j]
)
depths[k]
lats[sitelat]
lons[sitelon]
H = data.frame(data=stack(data.frame(data))[,1],
lat=rep(lats,length.out=length(lons)*length(lats)),
lon=rep(lons,each=length(lats)))
ggplot(H,aes(x=lon,y=lat))+geom_tile(aes(fill=data))
debugSource("D:/Code/HabitatModeling/makeHYCOM_TS.R", echo=TRUE)
debugSource("D:/Code/HabitatModeling/makeHYCOM_TS.R", echo=TRUE)
View(masterData.Data)
source("D:/Code/HabitatModeling/makeHYCOM_TS.R", echo=TRUE)
source("D:/Code/HabitatModeling/makeHYCOM_TS.R", echo=TRUE)
source("D:/Code/HabitatModeling/makeHYCOM_TS.R", echo=TRUE)
source("D:/Code/HabitatModeling/makeHYCOM_TS.R", echo=TRUE)
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_0_TS.Rdata')
plot(masterData.Data[1,])
plot(masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_100_TS.Rdata')
plot(masterData.Data[11,])
plot(masterData.Data[1,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_200_TS.Rdata')
plot(masterData.Data[1,])
plot(masterData.Data[11,])
View(masterData.Data)
View(masterData.Data)
masterData.Data[11,380:410]
masterData.Data[11,360:410]
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_0_TS.Rdata')
plot(masterData.Data[11,])
plot(masterData.Data[11,],main="JAX Salinity 0m")
plot(masterData.Data[1,],main="HZ Salinity 0m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_100_TS.Rdata')
plot(masterData.Data[11,],main="JAX Salinity 100m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_200_TS.Rdata')
plot(masterData.Data[11,],main="JAX Salinity 200m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_300_TS.Rdata')
plot(masterData.Data[11,],main="JAX Salinity 300m")
plot(masterData.Data[1,],main="HZ Salinity 300m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Temperature_100_TS.Rdata')
plot(masterData.Data[11,],main="JAX Temperature 100m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Temperature_0_TS.Rdata')
plot(masterData.Data[11,],main="JAX Temperature 0m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Temperature_100_TS.Rdata')
plot(masterData.Data[11,],main="JAX Temperature 100m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Temperature_200_TS.Rdata')
plot(masterData.Data[11,],main="JAX Temperature 200m")
load('J:/Chpt_3/HYCOM/0.08deg/TS/Temperature_300_TS.Rdata')
plot(masterData.Data[11,],main="JAX Temperature 300m")
JAS_SalProf = numeric()
rm(JAS_SalProf = numeric())
rm(JAS_SalProf
)
JAX_SalProf = numeric()
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_0_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_100_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
View(JAX_SalProf)
View(masterData.Data)
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_200_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_300_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_400_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_500_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_600_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_700_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
load('J:/Chpt_3/HYCOM/0.08deg/TS/Salinity_800_TS.Rdata')
JAX_SalProf = rbind(JAX_SalProf,masterData.Data[11,])
salDF = data.frame(Sal = stack(data.frame(JAX_SalProf))[,1])
ggplot(salDF)+geom_tile(aex(fill=salDF))
ggplot(salDF)+geom_tile(aes(fill=salDF))
salDF = data.frame(data=stack(data.frame(JAX_SalProf))[,1],
lat=rep(c(0,100,200,300,400,500,600,700,800),length.out=dim(masterData.Time)[2]*9),
lon=rep(masterData.Time,each=9))
salDF = data.frame(data=stack(data.frame(JAX_SalProf))[,1],
lat=rep(c(0,100,200,300,400,500,600,700,800),length.out=(dim(masterData.Time)[2]*9)),
lon=rep(masterData.Time,each=9))
dim(masterData.Time)[2]*9
dim(masterData.Time)
salDF = data.frame(data=stack(data.frame(JAX_SalProf))[,1],
lat=rep(c(0,100,200,300,400,500,600,700,800),length.out=(length(masterData.Time)*9)),
lon=rep(masterData.Time,each=9))
View(salDF)
salDF = data.frame(data=stack(data.frame(JAX_SalProf))[,1],
depth=rep(c(0,100,200,300,400,500,600,700,800),length.out=(length(masterData.Time)*9)),
time()=rep(masterData.Time,each=9))
salDF = data.frame(data=stack(data.frame(JAX_SalProf))[,1],
depth=rep(c(0,100,200,300,400,500,600,700,800),length.out=(length(masterData.Time)*9)),
time=rep(masterData.Time,each=9))
ggplot(salDF,aes(x=depth,y=time))+geom_tile(aes(fill=data))
ggplot(salDF,aes(y=depth,x=time))+geom_tile(aes(fill=data))
